trigger:
  branches:
    include:
      - Development
  paths:
    include:
      - WGL.BBSs/**

pr:
  branches:
    include:
      - Development
  paths:
    include:
      - WGL.BBSs/**

pool:
  name: Default
  demands:
    - Agent.Name -equals AZWSVDOP101  # Default to AZWSVDOP101

variables:
  projectPath: '$(Build.SourcesDirectory)/WGL.BBSs/WGL.BBS/WGL.BBS.csproj'
  buildOutput: '$(Build.ArtifactStagingDirectory)/publish'
  webAppName: 'WGLHZUS2DESVAS003'
  resourceGroupName: 'WGLHZUS2DESVRG002'
  packagePath: '$(Build.ArtifactStagingDirectory)/publish.zip'

steps:
- checkout: self
  clean: true

- script: |
    if /I NOT "$(Agent.Name)"=="AZWSVDOP101" if /I NOT "$(Agent.Name)"=="AZWSVDOP100" (
      echo Skipping execution on $(Agent.Name)
      exit /B 1
    )
  displayName: "Ensure the job runs only on AZWSVDOP101 or AZWSVDOP100"

# Step 1: Install .NET SDK
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

# Step 2: Restore dependencies
- script: |
    echo Restoring dependencies...
    dotnet restore "$(projectPath)"
  displayName: 'Restore Dependencies'

# Step 3: Build the project
- script: |
    echo Building the application...
    dotnet build "$(projectPath)" --configuration Release --no-restore
  displayName: 'Build Project'

# Step 4: Publish the application (for artifact generation)
- script: |
    echo Publishing the application...
    dotnet publish "$(projectPath)" --configuration Release --output "$(buildOutput)"
  displayName: 'Publish Application'

# Step 5: Create a zip package for deployment
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(buildOutput)'
    includeRootFolder: false
    archiveFile: '$(packagePath)'
  displayName: 'Create Zip Package'

# Step 6: Publish build artifacts (Optional - Useful for traceability)
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(packagePath)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
  displayName: 'Publish Build Artifacts'

# Step 7: Deploy to Azure Web App
- task: AzureWebApp@1
  enabled: true 
  inputs:
    azureSubscription: 'azure-s1'
    appName: '$(webAppName)'
    resourceGroupName: '$(resourceGroupName)'
    package: '$(packagePath)'
  displayName: 'Deploy to Azure Web App'

- script: |
    echo "Deployment failed, rolling back to last successful build..."
    
    # Get the last successful build ID using Azure DevOps CLI
    previousBuildId=$(az pipelines build list --status succeeded --top 1 --query "[0].id" -o tsv)
    
    if [ -n "$previousBuildId" ]; then
      echo "Rolling back to build ID: $previousBuildId"
      
      # Download the artifacts from the last successful build
      artifactUrl=$(az pipelines build artifact download --build-id $previousBuildId --artifact-name drop --path $(Build.ArtifactStagingDirectory))
      
      # Redeploy the previous build using the downloaded artifact
      az webapp deploy --resource-group $(resourceGroupName) --name $(webAppName) --src-path "$(Build.ArtifactStagingDirectory)/$(artifactUrl)"
    else
      echo "No previous successful build found. Rollback not possible."
    fi
  displayName: 'Rollback if Deployment Fails'
  condition: failed()  # Run this step only if the deployment step fails
